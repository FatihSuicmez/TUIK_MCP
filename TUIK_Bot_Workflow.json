{
  "name": "CepAssist",
  "nodes": [
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Listen for incoming events').first().json.message.from.id }}"
      },
      "id": "d2287bea-de47-4180-8ee6-55d4ab1a89da",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        2096,
        640
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "64fe44db-af19-43eb-9ff1-de0a72a9e645",
      "name": "Listen for incoming events",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        832,
        384
      ],
      "webhookId": "322dce18-f93e-4f86-b9b1-3305519b7834",
      "typeVersion": 1,
      "credentials": {
        "telegramApi": {
          "id": "5GZoshRgBqHMDRQs",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "a0bf9719-4272-46f6-ab3b-eda6f7b44fd8",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.message.text }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "e791d4f8-2c19-4c14-a71e-39a04f22e944",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        1200,
        384
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "5bd1788a-3d08-4eb3-8e03-3ce82f44d2a7",
      "name": "Speech to Text",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        1616,
        384
      ],
      "typeVersion": 1.3,
      "credentials": {
        "openAiApi": {
          "id": "1bRB6L3cgBFqNa4F",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "text",
              "stringValue": "={{ $json?.message?.text || \"\" }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b67a2a93-517b-469e-aaa4-32c422710743",
      "name": "Voice or Text",
      "type": "n8n-nodes-base.set",
      "position": [
        1040,
        384
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Listen for incoming events').item.json.message.voice.file_id }}"
      },
      "id": "8105c39f-9e87-44c4-9215-b3777f0b4164",
      "name": "Get Voice File",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1376,
        384
      ],
      "typeVersion": 1.1,
      "webhookId": "68f6d69d-a333-4fb7-a525-767392e08791",
      "credentials": {
        "telegramApi": {
          "id": "5GZoshRgBqHMDRQs",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Process Telegram Request\n",
        "height": 278.75,
        "width": 496.25,
        "color": 5
      },
      "id": "5537c777-f003-4673-b48a-4993a0c10520",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1008,
        288
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "You are the \"TUIK Data Assistant\", a highly capable AI agent connected to the TUIK Machine Comprehension Platform (MCP). Your purpose is to provide users with accurate statistical information from the Turkish Statistical Institute by using your tools effectively.\n\nToday's date is {{ $now }}.\n\n**Guidelines:**\n\n1.  **Initial Interaction:**\n    - If the user provides a simple greeting (e.g., \"merhaba\", \"selam\") or asks who you are, **do not use any tools**.\n    - Instead, provide a friendly introduction in Turkish: \"Merhaba! Ben TUIK Veri Asistanı. Türkiye İstatistik Kurumu verileri hakkında sorularınızı yanıtlamak için buradayım. Örneğin, 'enflasyon oranları' veya 'konut satış istatistikleri' gibi konularda size yardımcı olabilirim. Ne hakkında bilgi almak istersiniz?\"\n\n2.  **Handling Data Questions:**\n    - If the user asks a specific data-related question, you **must** follow the agentic tool workflow.\n    - Your first step is ALWAYS to call the `prepare_analysis_prompt` tool to understand which data category is relevant.\n\n3.  **Handling Ambiguity:**\n    - If a user's question is too vague (e.g., \"bana istatistik ver\"), do not guess.\n    - Ask for clarification. For example: \"Elbette, hangi konuda istatistik istersiniz? Örneğin: enflasyon, nüfus, istihdam veya dış ticaret gibi alanlardan birini belirtebilirsiniz.\"\n\n4.  **Date and Time Context:**\n    - If the user does not specify a date or year in their request (e.g., \"enflasyon oranı kaç?\"), assume they are asking for the most recent available data.\n    - If a specific year is mentioned (e.g., \"2023 yılı enflasyon oranı\"), ensure your analysis focuses on data relevant to that year.\n\n5.  **Data Presentation:**\n    - When you receive the final data from the `read_and_process_files` tool, do not just output the raw JSON.\n    - Summarize the key findings from the `sampled_data` in clear, easy-to-understand Turkish sentences.\n    - Always mention that the data is a sample from a larger dataset by including a sentence like: \"Bu veriler, daha büyük bir veri setinden alınan örneklere dayanmaktadır.\"\n\n6.  **Language:**\n    - Always respond in Turkish.\n\n---\nUSER QUESTION:\n{{$json.message.text}}"
        }
      },
      "id": "759b975f-d17c-4386-a5b3-12413f0361f4",
      "name": "CepAssist",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1936,
        384
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1904,
        656
      ],
      "id": "7ac93ac4-5e7d-4066-b900-a569fecc535d",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "sNJNG40p9s56gWBW",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "endpointUrl": "https://cd6e32b26195.ngrok-free.app/sse",
        "authentication": "bearerAuth"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [
        2288,
        656
      ],
      "id": "274e442d-73a2-48fc-9e0e-44831d6baf08",
      "name": "MCP Client",
      "credentials": {
        "httpBearerAuth": {
          "id": "eUrUveebD9ZKBVSo",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
        "text": "={{ $('Code').first().json.sanitizedText }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "MarkdownV2"
        }
      },
      "id": "e35c04ff-a050-4564-8c1b-5b22b556872f",
      "name": "Send a text message",
      "type": "n8n-nodes-base.telegram",
      "position": [
        2752,
        384
      ],
      "typeVersion": 1.1,
      "webhookId": "f3da8111-0f37-45d7-a85f-e1251c8290a3",
      "credentials": {
        "telegramApi": {
          "id": "5GZoshRgBqHMDRQs",
          "name": "Telegram account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// GİRİŞ: Bir önceki noddan gelen veriyi al.\n// Bu yöntem, önceki nodun adından bağımsız olduğu için daha sağlamdır.\nconst item = $input.item;\nconst inputText = item.json.output;\n\n// Eğer gelen veri bir metin değilse, hatayı önlemek için olduğu gibi geri döndür.\nif (typeof inputText !== 'string') {\n  return { json: { sanitizedText: inputText } };\n}\n\n// Telegram'ın MarkdownV2 formatı için kaçış karakteri uygulanması gereken karakterler.\nconst charsToEscape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];\n\nlet sanitizedText = inputText;\n\nfor (const char of charsToEscape) {\n  // RegExp kullanarak metindeki tüm özel karakterlerin önüne '\\' ekle.\n  sanitizedText = sanitizedText.replace(new RegExp('\\\\' + char, 'g'), '\\\\' + char);\n}\n\n// ÇIKIŞ: Temizlenmiş metni bir sonraki noda gönder.\nreturn {\n  json: {\n    sanitizedText: sanitizedText\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2384,
        384
      ],
      "id": "6fc6c9cf-8f7a-41b6-b0bd-655d57587a06",
      "name": "Code"
    }
  ],
  "pinData": {},
  "connections": {
    "If": {
      "main": [
        [
          {
            "node": "Get Voice File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "CepAssist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Voice or Text": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Voice File": {
      "main": [
        [
          {
            "node": "Speech to Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Speech to Text": {
      "main": [
        []
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "CepAssist",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Listen for incoming events": {
      "main": [
        [
          {
            "node": "Voice or Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CepAssist": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "CepAssist",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client": {
      "ai_tool": [
        [
          {
            "node": "CepAssist",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        []
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "daaba0bc-c610-4610-846b-fc1d2a14f329",
  "meta": {
    "templateId": "2462",
    "templateCredsSetupCompleted": true,
    "instanceId": "776ffa1de860d99220db3da20571e11915ae0f5454b218b1b5641c11bc7ced4c"
  },
  "id": "EWnKXCGG2YKcXpFc",
  "tags": []
}